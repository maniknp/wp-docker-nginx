upstream varnish_backend {
    server varnish:6081;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json;

    # Client max body size
    client_max_body_size 100M;

    # Proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;

    # Main location block
    location / {
        # Rate limiting for login attempts
        limit_req zone=login burst=5 nodelay;
        
        # Proxy to Varnish
        proxy_pass http://varnish_backend;
        
        # Cache headers for static content
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            proxy_pass http://varnish_backend;
        }
    }

    # WordPress admin area - bypass cache
    location /wp-admin {
        proxy_pass http://varnish_backend;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # WordPress login - bypass cache
    location /wp-login.php {
        proxy_pass http://varnish_backend;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # WordPress AJAX requests
    location /wp-admin/admin-ajax.php {
        proxy_pass http://varnish_backend;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # WordPress REST API
    location /wp-json/ {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://varnish_backend;
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Varnish status (optional - for monitoring)
    location /varnish-status {
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://varnish:6082;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS server (commented out - uncomment and configure SSL certificates)
# server {
#     listen 443 ssl http2;
#     server_name localhost;
#     
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Include the same configuration as HTTP
#     include /etc/nginx/conf.d/default.conf;
# } 